@page "/chatroom"
@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.SignalR.Client;
@using AzureServiceBusChatPOC.Hubs;
@using AzureServiceBusChatPOC.Models;

<h1>Blazor Chat Sample</h1>
<hr />


@if (_message != null)
{
    <div class="invalid-feedback">@_message</div>
    <small id="emailHelp" class="form-text text-muted">@_message</small>
}

@if (!_isChatting)
{
    <p>
        Enter your name to start chatting:
    </p>

    <input type="text" maxlength="32" @bind="@_username" />
    <button type="button" @onclick="@JoinChatRoom"><span class="oi oi-chat" aria-hidden="true"></span> Enter!</button>
}
else
{
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>You are connected as <b>@_username</b></span>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
    </div>
    <div id="scrollbox">
        @foreach (var item in _messages)
        {
            @if (item.IsNotice)
            {
            <div class="alert alert-info">@item.Body</div>
            }
            else
            {
                <div class="@item.CSS">
                    <div class="user">@item.Username</div>
                    <div class="msg">@item.Body</div>
                </div>
            }
        }
        <hr />
        <textarea class="input-lg" placeholder="enter your comment" @bind="@_newMessage"></textarea>
        <button class="btn btn-default" @onclick="@(() => SendAsync(_newMessage))">Send</button>
    </div>
}




@code {
    // flag to indicate chat status
    private bool _isChatting = false;

    // name of the user who will be chatting
    private string _username;

    // on-screen message
    private string _message;

    // new message input
    private string _newMessage;

    // list of messages in chat
    private List<Message> _messages = new List<Message>();

    private string _hubUrl;
    private HubConnection _hubConnection;

    public async Task JoinChatRoom()
    {
        // check username is valid
        if (string.IsNullOrWhiteSpace(_username))
        {
            _message = "please enter a name";
            return;
        };

        // Start chatting and force refresh UI, ref: https://github.com/dotnet/aspnetcore/issues/22159
        _isChatting = true;
        await Task.Delay(1);

        // remove old messages if any
        _messages.Clear();

        string baseUrl = navigationManager.BaseUri;

        _hubUrl = baseUrl.TrimEnd('/') + ChatHub.HubUrl;

        // Create the chat client
        _hubConnection = new HubConnectionBuilder()
        .WithUrl(_hubUrl)
        .Build();
        _hubConnection.ServerTimeout = TimeSpan.FromMinutes(5);

        _hubConnection.On<string, string>("ReceiveMessage", BroadcastMessage);
        await _hubConnection.StartAsync();
        await _hubConnection.SendAsync("JoinChatRoom", _username);
    }

    private async Task SendAsync(string message)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            await _hubConnection.SendAsync("Send", _username, message);
            _newMessage = string.Empty;
        }
    }

    private void BroadcastMessage(string name, string message)
    {
        bool isMine = name.Equals(_username, StringComparison.OrdinalIgnoreCase);

        _messages.Add(new Message(name, message, isMine));

        // Inform blazor the UI needs updating
        StateHasChanged();
    }

    private async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            await _hubConnection.SendAsync("LeaveChatRoom", _username);

            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();

            _hubConnection = null;
            _isChatting = false;
        }
    }
}
